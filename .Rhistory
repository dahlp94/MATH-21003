q()
mu <- 1
# generate x from mu
n <- 100
x <- rnorm(n, mu=mu)
x <- rnorm(n, mean=mu)
x
lhd_list <- sapply(mu_list, FUN=function(mu_candidate) {
prod(dnorm(x, mean=mu_candidate))
})
mu_list <- seq(-2,2, by=0.01)
lhd_list <- sapply(mu_list, FUN=function(mu_candidate) {
prod(dnorm(x, mean=mu_candidate))
})
plot(y=lhd_list, x=mu_list, type="l", xlab="mu", ylab="L(mu)")
which.max(lhd_list)
mu_list[which.max(lhd_list)]
# now increase the sample size
n <- 10^3
x <- rnorm(n, mean=mu)
# List of values that I want to guess for the parameter
# i.e. assuming mu is unknown
# make it dense.
mu_list <- seq(-2,2, by=0.01)
# evalue the density at eah individual value of mu
# i.e. we are computing the likelihood
lhd_list <- sapply(mu_list, FUN=function(mu_candidate) {
prod(dnorm(x, mean=mu_candidate))
})
which.max(lhd_list)
mu_list[which.max(lhd_list)]
plot(y=lhd_list, x=mu_list, type="l", xlab="mu", ylab="L(mu)")
mle_list <- sapply(1:1000, FUN=function(i) {
x <- rnorm(n, mean=mu)
# List of values that I want to guess for the parameter
# i.e. assuming mu is unknown
# make it dense.
mu_list <- seq(-2,2, by=0.01)
# evalue the density at eah individual value of mu
# i.e. we are computing the likelihood
lhd_list <- sapply(mu_list, FUN=function(mu_candidate) {
prod(dnorm(x, mean=mu_candidate))
})
which.max(lhd_list)
mu_list[which.max(lhd_list)]
plot(y=lhd_list, x=mu_list, type="l", xlab="mu", ylab="L(mu)")
} )
example(stan_model, package = "rstan", run.dontrun = TRUE)
library("rstan") # observe startup messages
getwd()
setwd("C:\Users\pd006\Desktop\internship_search\statistics\MATH-21003")
setwd("C:/Users/pd006/Desktop/internship_search/statistics/MATH-21003")
sample()
sample(1)
sample(5)
# We will simulate flipping a fair coin 10000 times and calculate
# the probability of getting heads.
# H: Head  T: Tail
# We will perform sample with replacement
sample(c("H", "T"))
help(sample)
# We will simulate flipping a fair coin 10000 times and calculate
# the probability of getting heads.
# H: Head  T: Tail
# We will perform sample with replacement
sample(c("H", "T"), size = 1)
# We will simulate flipping a fair coin 10000 times and calculate
# the probability of getting heads.
# H: Head  T: Tail
# We will perform sample with replacement
sample(c("H", "T"), size = 1)
# We will simulate flipping a fair coin 10000 times and calculate
# the probability of getting heads.
# H: Head  T: Tail
# We will perform sample with replacement
sample(c("H", "T"), size = 2)
# We will simulate flipping a fair coin 10000 times and calculate
# the probability of getting heads.
# H: Head  T: Tail
# We will perform sample with replacement
sample(c("H", "T"), size = 10000)
# We will simulate flipping a fair coin 10000 times and calculate
# the probability of getting heads.
# H: Head  T: Tail
# We will perform sample with replacement
sample(c("H", "T"), size = 10000, replace = TRUE)
# We will simulate flipping a fair coin 10000 times and calculate
# the probability of getting heads.
# H: Head  T: Tail
# We will perform sample with replacement
coin_flips <- sample(c("H", "T"), size = 10000, replace = TRUE)
coin_flips["H"]
coin_flips[1]
coin_flips == "H"
sum(coin_flips == "H")
length(coin_flips)
sum(coin_flips)
# Print the estimated probability
cat("The estimated robability of anding a heads is: ", prob_heads)
# Now let us calculate the probability of getting heads
prob_heads <- sum(coin_flips == "H") / length(coin_flips)
# Print the estimated probability
cat("The estimated robability of anding a heads is: ", prob_heads)
# Print the estimated probability
cat("The estimated robability of anding a heads is:", prob_heads)
# Example vector of coin flips
flips <- c("H", "T", "T", "H", "H", "H", "H", "H", "T", "H")
# Apply the rle function
result <- rle(flips)
# Output the result
print(result)
# Print the estimated probability
print("The estimated robability of anding a heads is:", prob_heads)
# Print the estimated probability
print("The estimated robability of anding a heads is:", prob_heads)
# Print the estimated probability
cat("The estimated robability of anding a heads is:", prob_heads)
help(rle)
# Apply the rle function
result <- rle(flips)
flips
rle(flips)
rle(flips)["length"]
rle(flips)$length
streaks <- rle(flips)$length
outcomes <- rle(flips)$values
streaks[outcomes == "H"]
sum(streaks[outcomes == "H"]
)
streaks[outcomes == "H"] >= 2
sum(streaks[outcomes == "H"] >= 2
)
# Now let us find the probability of getting 3 or more
# heads in a row
streak_length <- 3
num_streaks_heads <- find_streaks(flips = coin_flips,
outcome = "H",
streak_length = streak_length)
# get the length and values of the run length encoding
streaks <- rle(flips)$length
# Function to find streaks of a specific outcome
find_streaks <- function(flips, outcome, streak_length) {
# get the length and values of the run length encoding
streaks <- rle(flips)$length
outcomes <- rle(flips)$values
# find out how many streaks are greater than or equal to
# the streak_length
sum(streaks[outcomes == outcome] >= streak_length)
}
num_streaks_heads <- find_streaks(flips = coin_flips,
outcome = "H",
streak_length = streak_length)
num_streaks_heads
prob_streak_head <- num_streaks_heads / length(coin_flips)
prob_streak_head
cat("The estimated probability of landing 3 or more heads in a
row is:", prob_streak_head)
cat("The estimated probability of landing 3 or more heads in a row
is:", prob_streak_head)
cat("The estimated probability of landing 3 or more heads in a row is:", prob_streak_head)
cat("The estimated probability of landing 3 or more heads in a row is:",
prob_streak_head)
